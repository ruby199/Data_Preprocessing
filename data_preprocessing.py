# -*- coding: utf-8 -*-
"""Data_Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/193lRbzgOROk-feZ4KHcUAPsxYsWYCBK_
"""

import pandas as pd
import numpy as np

raw_data = {'first_name': ['Jason', np.nan, 'Tina', 'Jake', 'Amy'],
            'last_name': ['Miller', np.nan, 'Ali', 'Milner', 'Cooze'],
            'age': [42, np.nan, 36, 24, 73],
            'sex': ['m', np.nan, 'f', 'm', 'f'],
            'preTestScore': [4, np.nan, np.nan, 2, 3],
            'postTestScore': [25, np.nan, np.nan, 62, 70]}

df = pd.DataFrame(raw_data, columns = ['first_name', 'last_name', 'age', 'sex', 'preTestScore', 'postTestScore'])
df

df.isnull().sum() / len(df) # the rate of the missing data for each features

# remove rows of all data with NaN using dropna
df.dropna()

#store the df with NaN values dropped
df_no_missing = df.dropna()
df_no_missing

df_cleaned = df.dropna(how='all') # 'all' deletes rows with all values NaN
df_cleaned

df['location'] = np.nan # nan is NaN meaning not a number, adding a feature column of location with nan
df

df.dropna(axis=1, how='all') # if all column values are NaN, add an axis to delete it
# While using as argument, axis=0 means selecting object across rows vertically, and axis=1 means selecting object across columns horizontally

df.dropna(axis=0, thresh=1) # If thresh=1 is specified, rows with at least one data are left // meaning don't drop if there's at least data

# original data
df

df.fillna(0)

# calculate the average value per column and fill only that column with values

df["preTestScore"].fillna(df["preTestScore"].mean(), inplace=True) # The parameter inplace does not return the changed value, but changes the value of the value variable itself (not the copy)
df

# the original data
df

# avg of female: 70.0 --> filling 70 for NaN of Tina
df.groupby("sex")["postTestScore"].transform("mean")

df["postTestScore"].fillna(df.groupby("sex")["postTestScore"].transform("mean"), inplace=True)
df

"""### Handling Categorical Data"""

edges = pd.DataFrame({'source': [0, 1, 2], 'target': [2, 2, 3],
                      'weight': [3, 4, 5], 'color': ['red', 'blue', 'blue']})
edges

edges.dtypes

pd.get_dummies(edges["color"])

weight_dict = {3:"M", 4:"L", 5:"XL"}
edges["weight_sign"] = edges["weight"].map(weight_dict)
weight_sign = pd.get_dummies(edges["weight_sign"])
weight_sign

pd.concat([edges, weight_sign], axis=1)

raw_data = {'regiment': ['Nighthawks', 'Nighthawks', 'Nighthawks', 'Nighthawks', 'Dragoons', 'Dragoons', 'Dragoons', 'Dragoons', 'Scouts', 'Scouts', 'Scouts', 'Scouts'],
            'company': ['1st', '1st', '2nd', '2nd', '1st', '1st', '2nd', '2nd','1st', '1st', '2nd', '2nd'],
            'name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze', 'Jacon', 'Ryaner', 'Sone', 'Sloan', 'Piger', 'Riani', 'Ali'],
            'preTestScore': [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3],
            'postTestScore': [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]}

df = pd.DataFrame(raw_data, columns = ['regiment', 'company', 'name', 'preTestScore', 'postTestScore'])
df

bins = [0, 25, 50, 75, 100]
group_names = ['Low', 'Okay', 'Good', 'Great']
categories = pd.cut(df['postTestScore'], bins, labels=group_names)
categories

df = pd.DataFrame(
    {'A':[14.00,90.20,90.95,96.27,91.21],
     'B':[103.02,107.26,110.35,114.23,114.68],
     'C':['big','small','big','small','small']})

df

"""- Min-Max Normalization"""

df["A"] - df["A"].min()

( df["A"] - df["A"].min() ) / (df["A"].max() - df["A"].min())

""" - Standardization

"""

( df["B"] - df["B"].mean() ) / (df["B"].std())